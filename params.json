{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","body":"== nginx-rtmp-module ==\r\n\r\nNGINX-based RTMP server\r\n\r\nWiki manual:\r\n\r\n  https://github.com/arut/nginx-rtmp-module/wiki\r\n\r\nFeatures:\r\n\r\n* Live streaming of video/audio\r\n\r\n* Video on demand (FLV)\r\n\r\n* Stream relay support for distributed\r\n  streaming: push & pull models\r\n\r\n* Recording published streams in FLV file\r\n\r\n* H264/AAC support\r\n\r\n* Online transcoding with FFmpeg \r\n  (experimental; Linux only)\r\n\r\n* HLS (HTTP Live Streaming) support\r\n  (experimental; libavformat >= 53.31.100)\r\n\r\n* HTTP callbacks on publish/play/record\r\n\r\n* Advanced buffering techniques\r\n  to keep memory allocations at a minimum\r\n  level for faster streaming and low\r\n  memory footprint\r\n\r\n* Works with Flash RTMP clients as well as\r\n  ffmpeg/rtmpdump/flvstreamer etc\r\n  (see examples in test/ subdir)\r\n\r\n* Statistics in XML/XSL in machine- & human-\r\n  readable form\r\n\r\n\r\nBuild:\r\n\r\ncd to NGINX source directory & run this:\r\n\r\n./configure --add-module=<path-to-nginx-rtmp-module>\r\nmake\r\nmake install\r\n\r\n\r\nKnown issue:\r\n\r\n  The module does not share data between workers.\r\n  Because of this live streaming is only available \r\n  in one-worker mode so far. Video-on-demand has no \r\n  such limitations.\r\n\r\n\r\nRTMP URL format:\r\n\r\nrtmp://rtmp.example.com/<app>[/<name>]\r\n\r\n<app> -  should match one of application {}\r\n         blocks in config\r\n<name> - interpreted by each application\r\n         can be empty\r\n\r\n\r\nExample nginx.conf:\r\n\r\nrtmp {\r\n\r\n    server {\r\n\r\n        listen 1935;\r\n\r\n        chunk_size 4000;\r\n\r\n        # TV mode: one publisher, many subscribers\r\n        application mytv {\r\n\r\n            # enable live streaming\r\n            live on;\r\n\r\n            # record first 1K of stream\r\n            record all;\r\n            record_path /tmp/av;\r\n            record_max_size 1K;\r\n\r\n            # append current timestamp to each flv\r\n            record_unique on;\r\n\r\n            # publish only from localhost\r\n            allow publish 127.0.0.1;\r\n            deny publish all;\r\n\r\n            #allow play all;\r\n        }\r\n\r\n        # Transcoding (ffmpeg needed)\r\n        application big {\r\n            live on;\r\n\r\n            # On every pusblished stream run this command (ffmpeg)\r\n            # with substitutions: $app/${app}, $name/${name} for application & stream name.\r\n            #\r\n            # This ffmpeg call receives stream from this application &\r\n            # reduces the resolution down to 32x32. The stream is the published to\r\n            # 'small' application (see below) under the same name.\r\n            #\r\n            # ffmpeg can do anything with the stream like video/audio\r\n            # transcoding, resizing, altering container/codec params etc\r\n            #\r\n            # Multiple exec lines can be specified.\r\n\r\n            exec /usr/bin/ffmpeg -re -i rtmp://localhost:1935/$app/$name -vcodec flv -acodec copy -s 32x32 -f flv rtmp://localhost:1935/small/${name};\r\n        }\r\n\r\n        application small {\r\n            live on;\r\n            # Video with reduced resolution comes here from ffmpeg\r\n        }\r\n\r\n        application mypush {\r\n            live on;\r\n\r\n            # Every stream published here\r\n            # is automatically pushed to \r\n            # these two machines\r\n            push rtmp1.example.com;\r\n            push rtmp2.example.com:1934;\r\n        }\r\n\r\n        application mypull {\r\n            live on;\r\n\r\n            # Pull all streams from remote machine\r\n            # and play locally\r\n            pull rtmp://rtmp3.example.com pageUrl=www.example.com/index.html;\r\n        }\r\n\r\n        # video on demand\r\n        application vod {\r\n            play /var/flvs;\r\n        }\r\n\r\n        # Many publishers, many subscribers\r\n        # no checks, no recording\r\n        application videochat {\r\n\r\n            live on;\r\n\r\n            # The following notifications receive all \r\n            # the session variables as well as \r\n            # particular call arguments in HTTP POST\r\n            # request\r\n\r\n            # Make HTTP request & use HTTP retcode\r\n            # to decide whether to allow publishing\r\n            # from this connection or not\r\n            on_publish http://localhost:8080/publish;\r\n\r\n            # Same with playing\r\n            on_play http://localhost:8080/play;\r\n\r\n            # Publish/play end (repeats on disconnect)\r\n            on_done http://localhost:8080/done;\r\n\r\n            # All above mentioned notifications receive\r\n            # standard connect() arguments as well as \r\n            # play/publish ones. If any arguments are sent\r\n            # with GET-style syntax to play & publish\r\n            # these are also included.\r\n            # Example URL:\r\n            #   rtmp://localhost/myapp/mystream?a=b&c=d\r\n\r\n            # record 10 video keyframes (no audio) every 2 minutes\r\n            record keyframes;\r\n            record_path /tmp/vc;\r\n            record_max_frames 10;\r\n            record_interval 2m;\r\n\r\n            # Async notify about an flv recorded\r\n            on_record_done http://localhost:8080/record_done;\r\n\r\n        }\r\n\r\n\r\n        # HLS (experimental)\r\n\r\n        # HLS requires libavformat & should be configured as a separate\r\n        # NGINX module in addition to nginx-rtmp-module:\r\n        # ./configure ... --add-module=/path/to/nginx-rtmp-module/hls ...\r\n\r\n        # For HLS to work please create a directory in tmpfs (/tmp/app here)\r\n        # for the fragments. The directory contents is served via HTTP (see\r\n        # http{} section in config)\r\n        #\r\n        # Incoming stream must be in H264/AAC/MP3. For iPhones use baseline H264\r\n        # profile (see ffmpeg example).\r\n        # This example creates RTMP stream from movie ready for HLS:\r\n        #\r\n        # ffmpeg -loglevel verbose -re -i movie.avi  -vcodec libx264 \r\n        #    -vprofile baseline -acodec libmp3lame -ar 44100 -ac 1 \r\n        #    -f flv rtmp://localhost:1935/hls/movie\r\n        #\r\n        # If you need to transcode live stream use 'exec' feature.\r\n        #\r\n        application hls {\r\n            hls on;\r\n            hls_path /tmp/app;\r\n            hls_fragment 5s;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n# HTTP can be used for accessing RTMP stats\r\nhttp {\r\n\r\n    server {\r\n\r\n        listen      8080;\r\n\r\n        # This URL provides RTMP statistics in XML\r\n        location /stat {\r\n            rtmp_stat all;\r\n\r\n            # Use this stylesheet to view XML as web page\r\n            # in browser\r\n            rtmp_stat_stylesheet stat.xsl;\r\n        }\r\n\r\n        location /stat.xsl {\r\n            # XML stylesheet to view RTMP stats.\r\n            # Copy stat.xsl wherever you want\r\n            # and put the full directory path here\r\n            root /path/to/stat.xsl/;\r\n        }\r\n\r\n        location /hls {\r\n            # Serve HLS fragments\r\n            alias /tmp/app;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nDonation:\r\n\r\n  If you want to support the project follow PayPal link\r\n  https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=L5JANTRG78XE4\r\n\r\n","name":"Nginx-rtmp-module","tagline":"NGINX-based Media Streaming Server"}